generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                  Int       @id @default(autoincrement())
  userId              Int
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  created_at          DateTime  @default(now()) @db.DateTime(0)
  updated_at          DateTime  @updatedAt @db.DateTime(0)
  deleted_at          DateTime? @db.DateTime(0)
  user                users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@index([userId], map: "Account_userId_fkey")
}

model bookings {
  id             Int                    @id @default(autoincrement())
  quote_id       Int                    @unique
  client_id      Int
  hotel_id       Int
  travel_date    DateTime               @db.DateTime(0)
  return_date    DateTime               @db.DateTime(0)
  meal_plan      bookings_meal_plan
  room_category  bookings_room_category
  status         bookings_status        @default(CONFIRMED)
  voucher_url    String?
  agent_id       Int
  invoiceid      Int?                   @unique
  created_at     DateTime               @default(now()) @db.DateTime(0)
  updated_at     DateTime?              @updatedAt @db.DateTime(0)
  deleted_at     DateTime?              @db.DateTime(0)
  public_id      String                 @unique
  user           users                  @relation(fields: [agent_id], references: [id])
  client         clients                @relation(fields: [client_id], references: [id])
  hotel          hotels                 @relation(fields: [hotel_id], references: [id])
  invoice        invoices?              @relation(fields: [invoiceid], references: [id])
  quote          quotes                 @relation(fields: [quote_id], references: [id])
  cancellations  cancellations[]
  transportation transportation[]
  payments       payments[]             @relation("BookingToPayment")

  @@index([agent_id], map: "Booking_agentId_fkey")
  @@index([client_id], map: "Booking_clientId_fkey")
  @@index([hotel_id], map: "Booking_hotelId_fkey")
}

model cancellations {
  id                Int           @id @default(autoincrement())
  booking_id        Int
  cancellation_date DateTime      @default(now()) @db.DateTime(0)
  reason            String?
  hotel_charges     Float
  credit_note_url   String?
  refund_amount     Float
  created_at        DateTime      @default(now()) @db.DateTime(0)
  updated_at        DateTime?     @updatedAt @db.DateTime(0)
  deleted_at        DateTime?     @db.DateTime(0)
  processed_by      Int
  status            shared_status @default(ACTIVE)
  booking           bookings      @relation(fields: [booking_id], references: [id])
  user              users         @relation(fields: [processed_by], references: [id])

  @@index([booking_id], map: "Cancellation_bookingId_fkey")
  @@index([processed_by], map: "Cancellation_processedById_fkey")
}

model clients {
  id         Int           @id @default(autoincrement())
  name       String
  email      String        @unique
  phone      String        @unique
  address    String?
  created_at DateTime      @default(now()) @db.DateTime(0)
  updated_at DateTime?     @updatedAt @db.DateTime(0)
  deleted_at DateTime?     @db.DateTime(0)
  public_id  String
  status     shared_status @default(ACTIVE)
  enc_phone  String        @unique @db.VarChar(255)
  branch_id  Int?
  bookings   bookings[]
  branch     branches?     @relation(fields: [branch_id], references: [id])
  invoices   invoices[]
  quotes     quotes[]

  @@index([branch_id], map: "clients_branch_id_fkey")
}

model hotel_policies {
  id               Int           @id @default(autoincrement())
  cancellation     String
  payment_terms    String
  commission_terms String
  hotel_id         Int
  deleted_at       DateTime?     @db.DateTime(0)
  created_at       DateTime      @default(now()) @db.DateTime(0)
  status           shared_status @default(ACTIVE)
  updated_at       DateTime?     @updatedAt @db.DateTime(0)
  hotel            hotels        @relation(fields: [hotel_id], references: [id])
  seasons          seasons[]

  @@index([hotel_id], map: "HotelPolicy_hotelId_fkey")
}

model hotels {
  id              Int              @id @default(autoincrement())
  name            String
  location        String
  contact_email   String           @unique
  contact_phone   String           @unique
  commission_rate Float?
  created_at      DateTime         @default(now()) @db.DateTime(0)
  updated_at      DateTime?        @updatedAt @db.DateTime(0)
  deleted_at      DateTime?        @db.DateTime(0)
  status          shared_status    @default(ACTIVE)
  enc_phone       String           @unique @db.VarChar(255)
  bookings        bookings[]
  hotel_policies  hotel_policies[]
  rack_rates      rack_rates[]
  rate_cards      rate_cards[]
}

model invoices {
  id             Int             @id @default(autoincrement())
  invoice_number String          @unique
  quote_id       Int             @unique
  client_id      Int
  amount         Float
  tax_amount     Float           @default(0)
  total_amount   Float
  due_date       DateTime        @db.DateTime(0)
  status         invoices_status @default(UNPAID)
  created_at     DateTime        @default(now()) @db.DateTime(0)
  updated_at     DateTime?       @updatedAt @db.DateTime(0)
  deleted_at     DateTime?       @db.DateTime(0)
  public_id      String          @unique
  booking        bookings?
  client         clients         @relation(fields: [client_id], references: [id])
  quote          quotes          @relation(fields: [quote_id], references: [id])
  payments       payments[]
  reminders      reminders[]
  users          users[]         @relation("InvoiceToUser")

  @@index([client_id], map: "Invoice_clientId_fkey")
}

model notifications {
  id             Int                @id @default(autoincrement())
  user_id        Int
  title          String
  message        String
  is_read        Boolean            @default(false)
  read_at        DateTime?          @db.DateTime(0)
  type           notifications_type
  reference_id   Int?
  reference_type String?
  created_at     DateTime           @default(now()) @db.DateTime(0)
  updated_at     DateTime?          @updatedAt @db.DateTime(0)
  deleted_at     DateTime?          @db.DateTime(0)
  status         shared_status      @default(ACTIVE)
  users          users              @relation(fields: [user_id], references: [id])

  @@index([user_id], map: "Notification_userId_fkey")
}

model payments {
  id             Int                     @id @default(autoincrement())
  invoice_id     Int
  amount         Float
  payment_date   DateTime                @default(now()) @db.DateTime(0)
  payment_method payments_payment_method
  transaction_id String?
  receipt_url    String?
  is_confirmed   Boolean                 @default(false)
  confirmed_at   DateTime?               @db.DateTime(0)
  created_at     DateTime                @default(now()) @db.DateTime(0)
  updated_at     DateTime?               @updatedAt @db.DateTime(0)
  deleted_at     DateTime?               @db.DateTime(0)
  public_id      String                  @unique
  status         shared_status           @default(ACTIVE)
  enc_phone      String?                 @db.VarChar(255)
  phone          String?
  invoice        invoices                @relation(fields: [invoice_id], references: [id])
  bookings       bookings[]              @relation("BookingToPayment")

  @@index([invoice_id], map: "Payment_invoiceId_fkey")
  @@index([transaction_id], map: "Payment_transactionId_fkey")
}

model permissions {
  id            Int           @id @default(autoincrement())
  role          users_role
  user_id       Int           @default(0)
  tbl           String        @db.VarChar(50)
  rec           Int           @default(0)
  general       Int           @default(0)
  create        Int           @default(0)
  read          Int           @default(0)
  update        Int           @default(0)
  delete        Int           @default(0)
  custom_action String?       @db.VarChar(40)
  added_by      Int           @default(0)
  created_at    DateTime      @default(now()) @db.DateTime(0)
  updated_at    DateTime?     @updatedAt @db.DateTime(0)
  status        shared_status @default(ACTIVE)
  deleted_at    DateTime?     @db.DateTime(0)

  @@index([role], map: "group_id")
  @@index([rec], map: "idx_o_permissions_rec")
  @@index([status], map: "idx_o_permissions_status")
  @@index([tbl], map: "idx_o_permissions_tbl")
  @@index([user_id], map: "user_id")
}

model quotes {
  id              Int           @id @default(autoincrement())
  rate_card_id    Int
  client_id       Int
  status          quotes_status @default(ACTIVE)
  expiration_date DateTime      @db.DateTime(0)
  created_at      DateTime      @default(now()) @db.DateTime(0)
  updated_at      DateTime?     @updatedAt @db.DateTime(0)
  deleted_at      DateTime?     @db.DateTime(0)
  public_id       String        @unique
  booking         bookings?
  invoice         invoices?
  client          clients       @relation(fields: [client_id], references: [id])
  rate_card       rate_cards    @relation(fields: [rate_card_id], references: [id])

  @@index([client_id], map: "Quote_clientId_fkey")
  @@index([rate_card_id], map: "Quote_rateCardId_fkey")
}

model rack_rates {
  id             Int                      @id @default(autoincrement())
  rate           Float
  currency       String                   @default("KES")
  travel_period  rack_rates_travel_period
  meal_plan      rack_rates_meal_plan
  room_category  rack_rates_room_category
  pdf_url        String?
  isProcessed    Boolean                  @default(false)
  processed_date DateTime?                @db.DateTime(0)
  hotel_id       Int
  created_at     DateTime                 @default(now()) @db.DateTime(0)
  updated_at     DateTime?                @updatedAt @db.DateTime(0)
  deleted_at     DateTime?                @db.DateTime(0)
  public_id      String                   @unique
  status         shared_status            @default(ACTIVE)
  hotel          hotels                   @relation(fields: [hotel_id], references: [id])
  rate_cards     rate_cards[]

  @@index([hotel_id], map: "RackRate_hotelId_fkey")
}

model rate_cards {
  id               Int                      @id @default(autoincrement())
  name             String
  base_rate        Float
  commission_rate  Float?
  markup_rate      Float?
  discount_amount  Float?
  discount_percent Float?
  final_rate       Float
  currency         String                   @default("USD")
  travel_period    rate_cards_travel_period
  meal_plan        rate_cards_meal_plan
  room_category    rate_cards_room_category
  commission       Float?
  is_active        Boolean                  @default(true)
  rack_rate_id     Int
  hotel_id         Int
  created_at       DateTime                 @default(now()) @db.DateTime(0)
  updated_at       DateTime?                @updatedAt @db.DateTime(0)
  deleted_at       DateTime?                @db.DateTime(0)
  created_by       Int
  public_id        String                   @unique
  status           shared_status            @default(ACTIVE)
  quotes           quotes[]
  users            users                    @relation(fields: [created_by], references: [id])
  hotels           hotels                   @relation(fields: [hotel_id], references: [id])
  rack_rates       rack_rates               @relation(fields: [rack_rate_id], references: [id])

  @@index([created_by], map: "RateCard_createdById_fkey")
  @@index([hotel_id], map: "RateCard_hotelId_fkey")
  @@index([rack_rate_id], map: "RateCard_rackRateId_fkey")
}

model reminders {
  id            Int           @id @default(autoincrement())
  invoice_id    Int
  reminder_date DateTime      @db.DateTime(0)
  message       String
  is_sent       Boolean       @default(false)
  sent_at       DateTime?
  created_at    DateTime      @default(now()) @db.DateTime(0)
  updated_at    DateTime?     @updatedAt @db.DateTime(0)
  deleted_at    DateTime?     @db.DateTime(0)
  status        shared_status @default(ACTIVE)
  invoices      invoices      @relation(fields: [invoice_id], references: [id])

  @@index([invoice_id], map: "Reminder_invoiceId_fkey")
}

model seasons {
  id              Int                 @id @default(autoincrement())
  name            String
  period_type     seasons_period_type
  start_date      DateTime            @db.DateTime(0)
  end_date        DateTime            @db.DateTime(0)
  hotel_policy_id Int
  created_at      DateTime            @default(now()) @db.DateTime(0)
  deleted_at      DateTime?           @db.DateTime(0)
  status          shared_status       @default(ACTIVE)
  updated_at      DateTime?           @updatedAt @db.DateTime(0)
  hotel_policies  hotel_policies      @relation(fields: [hotel_policy_id], references: [id])

  @@index([hotel_policy_id], map: "SeasonDate_hotelPolicyId_fkey")
}

model sessions {
  id            Int           @id @default(autoincrement())
  session_token String        @unique
  user_id       Int
  created_at    DateTime      @default(now()) @db.DateTime(0)
  updated_at    DateTime?     @updatedAt @db.DateTime(0)
  status        shared_status @default(ACTIVE)
  deleted_at    DateTime?     @db.DateTime(0)
  expires_at    DateTime      @db.DateTime(0)
  users         users         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "Session_userId_fkey")
}

model transportation {
  id              Int                   @id @default(autoincrement())
  type            transportation_type
  provider        String
  booking_ref     String?
  departure_date  DateTime              @db.DateTime(0)
  return_date     DateTime?             @db.DateTime(0)
  departure_point String
  arrival_point   String
  cost            Float
  booking_id      Int
  status          transportation_status @default(CONFIRMED)
  created_at      DateTime              @default(now()) @db.DateTime(0)
  updated_at      DateTime?             @updatedAt @db.DateTime(0)
  deleted_at      DateTime?             @db.DateTime(0)
  bookings        bookings              @relation(fields: [booking_id], references: [id])

  @@index([booking_id], map: "Transportation_bookingId_fkey")
}

model users {
  id                 Int              @id @default(autoincrement())
  name               String
  email              String           @unique
  email_verified     DateTime?        @db.DateTime(0)
  password           String
  salt               String?          @db.VarChar(255)
  role               users_role       @default(AGENT)
  created_at         DateTime         @default(now()) @db.DateTime(0)
  updated_at         DateTime?        @updatedAt @db.DateTime(0)
  status             users_status     @default(PENDING)
  deleted_at         DateTime?        @db.DateTime(0)
  public_id          String           @unique
  password_expiry    DateTime         @default(now()) @db.DateTime(0)
  two_factor_enabled Boolean          @default(false)
  national_id        String?          @unique
  phone              String?          @unique
  branch_id          Int?             @default(1)
  image              String?
  accounts           accounts[]
  bookings           bookings[]
  cancellations      cancellations[]
  events             events_log[]
  notifications      notifications[]
  rate_cards         rate_cards[]
  sessions           sessions[]
  branch             branches?        @relation(fields: [branch_id], references: [id])
  users_branches     users_branches[]
  invoices           invoices[]       @relation("InvoiceToUser")

  @@index([branch_id], map: "users_branch_id_fkey")
}

model branches {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  location       String
  created_at     DateTime         @default(now()) @db.DateTime(0)
  updated_at     DateTime?        @updatedAt @db.DateTime(0)
  deleted_at     DateTime?        @db.DateTime(0)
  status         shared_status    @default(ACTIVE)
  clients        clients[]
  users          users[]
  users_branches users_branches[]
}

model users_branches {
  id         Int           @id @default(autoincrement())
  user_id    Int
  branch_id  Int
  created_at DateTime      @default(now()) @db.DateTime(0)
  updated_at DateTime?     @updatedAt @db.DateTime(0)
  deleted_at DateTime?     @db.DateTime(0)
  status     shared_status @default(ACTIVE)
  branch     branches      @relation(fields: [branch_id], references: [id])
  user       users         @relation(fields: [user_id], references: [id])

  @@index([branch_id], map: "UserBranch_branchId_fkey")
  @@index([user_id], map: "UserBranch_userId_fkey")
}

model events_log {
  id         Int           @id @default(autoincrement())
  tbl        String        @db.VarChar(30)
  fld        Int
  details    String        @db.Text
  event_date DateTime      @default(now()) @db.DateTime(0)
  event_by   Int           @default(0)
  status     shared_status @default(ACTIVE)
  deleted_at DateTime?     @db.DateTime(0)
  users      users         @relation(fields: [event_by], references: [id])

  @@index([event_by], map: "events_log_event_by_fkey")
}

enum shared_status {
  ACTIVE
  INACTIVE
  DELETED
}

enum transportation_type {
  AIR
  SGR
  SGR_TRANSFER
  ROAD
  OTHER
}

enum seasons_period_type {
  LOW_SEASON
  SHOULDER_SEASON
  HIGH_SEASON
  PEAK_SEASON
}

enum quotes_status {
  ACTIVE
  CONVERTED
  EXPIRED
  DELETED
}

enum rack_rates_travel_period {
  LOW_SEASON
  SHOULDER_SEASON
  HIGH_SEASON
  PEAK_SEASON
}

enum payments_payment_method {
  CASH
  CREDIT_CARD
  BANK_TRANSFER
  MOBILE_MONEY
  CHEQUE
}

enum rack_rates_meal_plan {
  ROOM_ONLY
  BED_AND_BREAKFAST
  HALF_BOARD
  FULL_BOARD
  ALL_INCLUSIVE
}

enum rack_rates_room_category {
  STANDARD
  DELUXE
  SUITE
  EXECUTIVE
  PRESIDENTIAL
}

enum notifications_type {
  PAYMENT_REMINDER
  BOOKING_CONFIRMATION
  INVOICE_GENERATED
  CANCELLATION
  SYSTEM_ALERT
}

enum bookings_meal_plan {
  ROOM_ONLY
  BED_AND_BREAKFAST
  HALF_BOARD
  FULL_BOARD
  ALL_INCLUSIVE
}

enum users_role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  AGENT
  ACCOUNTANT
}

enum bookings_room_category {
  STANDARD
  DELUXE
  SUITE
  EXECUTIVE
  PRESIDENTIAL
}

enum invoices_status {
  UNPAID
  PARTIALLY_PAID
  PAID
  CANCELLED
  REFUNDED
  DELETED
}

enum bookings_status {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  DELETED
}

enum rate_cards_travel_period {
  LOW_SEASON
  SHOULDER_SEASON
  HIGH_SEASON
  PEAK_SEASON
}

enum rate_cards_meal_plan {
  ROOM_ONLY
  BED_AND_BREAKFAST
  HALF_BOARD
  FULL_BOARD
  ALL_INCLUSIVE
}

enum transportation_status {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  DELETED
}

enum rate_cards_room_category {
  STANDARD
  DELUXE
  SUITE
  EXECUTIVE
  PRESIDENTIAL
}

enum users_status {
  PENDING
  ACTIVE
  ARCHIVED
  SUSPENDED
  DELETED
}
