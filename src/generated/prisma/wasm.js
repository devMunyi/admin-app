
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-require-imports */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  provider_account_id: 'provider_account_id',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.BookingsScalarFieldEnum = {
  id: 'id',
  quote_id: 'quote_id',
  client_id: 'client_id',
  hotel_id: 'hotel_id',
  travel_date: 'travel_date',
  return_date: 'return_date',
  meal_plan: 'meal_plan',
  room_category: 'room_category',
  status: 'status',
  voucher_url: 'voucher_url',
  agent_id: 'agent_id',
  invoiceid: 'invoiceid',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  public_id: 'public_id'
};

exports.Prisma.CancellationsScalarFieldEnum = {
  id: 'id',
  booking_id: 'booking_id',
  cancellation_date: 'cancellation_date',
  reason: 'reason',
  hotel_charges: 'hotel_charges',
  credit_note_url: 'credit_note_url',
  refund_amount: 'refund_amount',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  processed_by: 'processed_by',
  status: 'status'
};

exports.Prisma.ClientsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  public_id: 'public_id',
  status: 'status',
  enc_phone: 'enc_phone',
  branch_id: 'branch_id'
};

exports.Prisma.Hotel_policiesScalarFieldEnum = {
  id: 'id',
  cancellation: 'cancellation',
  payment_terms: 'payment_terms',
  commission_terms: 'commission_terms',
  hotel_id: 'hotel_id',
  deleted_at: 'deleted_at',
  created_at: 'created_at',
  status: 'status',
  updated_at: 'updated_at'
};

exports.Prisma.HotelsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  location: 'location',
  contact_email: 'contact_email',
  contact_phone: 'contact_phone',
  commission_rate: 'commission_rate',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  status: 'status',
  enc_phone: 'enc_phone'
};

exports.Prisma.InvoicesScalarFieldEnum = {
  id: 'id',
  invoice_number: 'invoice_number',
  quote_id: 'quote_id',
  client_id: 'client_id',
  amount: 'amount',
  tax_amount: 'tax_amount',
  total_amount: 'total_amount',
  due_date: 'due_date',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  public_id: 'public_id'
};

exports.Prisma.NotificationsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  title: 'title',
  message: 'message',
  is_read: 'is_read',
  read_at: 'read_at',
  type: 'type',
  reference_id: 'reference_id',
  reference_type: 'reference_type',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  status: 'status'
};

exports.Prisma.PaymentsScalarFieldEnum = {
  id: 'id',
  invoice_id: 'invoice_id',
  amount: 'amount',
  payment_date: 'payment_date',
  payment_method: 'payment_method',
  transaction_id: 'transaction_id',
  receipt_url: 'receipt_url',
  is_confirmed: 'is_confirmed',
  confirmed_at: 'confirmed_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  public_id: 'public_id',
  status: 'status',
  enc_phone: 'enc_phone',
  phone: 'phone'
};

exports.Prisma.PermissionsScalarFieldEnum = {
  id: 'id',
  role: 'role',
  user_id: 'user_id',
  tbl: 'tbl',
  rec: 'rec',
  general: 'general',
  create: 'create',
  read: 'read',
  update: 'update',
  delete: 'delete',
  custom_action: 'custom_action',
  added_by: 'added_by',
  created_at: 'created_at',
  updated_at: 'updated_at',
  status: 'status',
  deleted_at: 'deleted_at'
};

exports.Prisma.QuotesScalarFieldEnum = {
  id: 'id',
  rate_card_id: 'rate_card_id',
  client_id: 'client_id',
  status: 'status',
  expiration_date: 'expiration_date',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  public_id: 'public_id'
};

exports.Prisma.Rack_ratesScalarFieldEnum = {
  id: 'id',
  rate: 'rate',
  currency: 'currency',
  travel_period: 'travel_period',
  meal_plan: 'meal_plan',
  room_category: 'room_category',
  pdf_url: 'pdf_url',
  isProcessed: 'isProcessed',
  processed_date: 'processed_date',
  hotel_id: 'hotel_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  public_id: 'public_id',
  status: 'status'
};

exports.Prisma.Rate_cardsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  base_rate: 'base_rate',
  commission_rate: 'commission_rate',
  markup_rate: 'markup_rate',
  discount_amount: 'discount_amount',
  discount_percent: 'discount_percent',
  final_rate: 'final_rate',
  currency: 'currency',
  travel_period: 'travel_period',
  meal_plan: 'meal_plan',
  room_category: 'room_category',
  commission: 'commission',
  is_active: 'is_active',
  rack_rate_id: 'rack_rate_id',
  hotel_id: 'hotel_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  created_by: 'created_by',
  public_id: 'public_id',
  status: 'status'
};

exports.Prisma.RemindersScalarFieldEnum = {
  id: 'id',
  invoice_id: 'invoice_id',
  reminder_date: 'reminder_date',
  message: 'message',
  is_sent: 'is_sent',
  sent_at: 'sent_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  status: 'status'
};

exports.Prisma.SeasonsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  period_type: 'period_type',
  start_date: 'start_date',
  end_date: 'end_date',
  hotel_policy_id: 'hotel_policy_id',
  created_at: 'created_at',
  deleted_at: 'deleted_at',
  status: 'status',
  updated_at: 'updated_at'
};

exports.Prisma.SessionsScalarFieldEnum = {
  id: 'id',
  session_token: 'session_token',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  status: 'status',
  deleted_at: 'deleted_at',
  expires_at: 'expires_at'
};

exports.Prisma.TransportationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  provider: 'provider',
  booking_ref: 'booking_ref',
  departure_date: 'departure_date',
  return_date: 'return_date',
  departure_point: 'departure_point',
  arrival_point: 'arrival_point',
  cost: 'cost',
  booking_id: 'booking_id',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  email_verified: 'email_verified',
  password: 'password',
  salt: 'salt',
  role: 'role',
  created_at: 'created_at',
  updated_at: 'updated_at',
  status: 'status',
  deleted_at: 'deleted_at',
  public_id: 'public_id',
  password_expiry: 'password_expiry',
  two_factor_enabled: 'two_factor_enabled',
  national_id: 'national_id',
  phone: 'phone',
  branch_id: 'branch_id',
  image: 'image'
};

exports.Prisma.BranchesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  location: 'location',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  status: 'status'
};

exports.Prisma.Users_branchesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  branch_id: 'branch_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  status: 'status'
};

exports.Prisma.Events_logScalarFieldEnum = {
  id: 'id',
  tbl: 'tbl',
  fld: 'fld',
  details: 'details',
  event_date: 'event_date',
  event_by: 'event_by',
  status: 'status',
  deleted_at: 'deleted_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.accountsOrderByRelevanceFieldEnum = {
  type: 'type',
  provider: 'provider',
  provider_account_id: 'provider_account_id',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.bookingsOrderByRelevanceFieldEnum = {
  voucher_url: 'voucher_url',
  public_id: 'public_id'
};

exports.Prisma.cancellationsOrderByRelevanceFieldEnum = {
  reason: 'reason',
  credit_note_url: 'credit_note_url'
};

exports.Prisma.clientsOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  public_id: 'public_id',
  enc_phone: 'enc_phone'
};

exports.Prisma.hotel_policiesOrderByRelevanceFieldEnum = {
  cancellation: 'cancellation',
  payment_terms: 'payment_terms',
  commission_terms: 'commission_terms'
};

exports.Prisma.hotelsOrderByRelevanceFieldEnum = {
  name: 'name',
  location: 'location',
  contact_email: 'contact_email',
  contact_phone: 'contact_phone',
  enc_phone: 'enc_phone'
};

exports.Prisma.invoicesOrderByRelevanceFieldEnum = {
  invoice_number: 'invoice_number',
  public_id: 'public_id'
};

exports.Prisma.notificationsOrderByRelevanceFieldEnum = {
  title: 'title',
  message: 'message',
  reference_type: 'reference_type'
};

exports.Prisma.paymentsOrderByRelevanceFieldEnum = {
  transaction_id: 'transaction_id',
  receipt_url: 'receipt_url',
  public_id: 'public_id',
  enc_phone: 'enc_phone',
  phone: 'phone'
};

exports.Prisma.permissionsOrderByRelevanceFieldEnum = {
  tbl: 'tbl',
  custom_action: 'custom_action'
};

exports.Prisma.quotesOrderByRelevanceFieldEnum = {
  public_id: 'public_id'
};

exports.Prisma.rack_ratesOrderByRelevanceFieldEnum = {
  currency: 'currency',
  pdf_url: 'pdf_url',
  public_id: 'public_id'
};

exports.Prisma.rate_cardsOrderByRelevanceFieldEnum = {
  name: 'name',
  currency: 'currency',
  public_id: 'public_id'
};

exports.Prisma.remindersOrderByRelevanceFieldEnum = {
  message: 'message'
};

exports.Prisma.seasonsOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.sessionsOrderByRelevanceFieldEnum = {
  session_token: 'session_token'
};

exports.Prisma.transportationOrderByRelevanceFieldEnum = {
  provider: 'provider',
  booking_ref: 'booking_ref',
  departure_point: 'departure_point',
  arrival_point: 'arrival_point'
};

exports.Prisma.usersOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  password: 'password',
  salt: 'salt',
  public_id: 'public_id',
  national_id: 'national_id',
  phone: 'phone',
  image: 'image'
};

exports.Prisma.branchesOrderByRelevanceFieldEnum = {
  name: 'name',
  location: 'location'
};

exports.Prisma.events_logOrderByRelevanceFieldEnum = {
  tbl: 'tbl',
  details: 'details'
};
exports.bookings_meal_plan = exports.$Enums.bookings_meal_plan = {
  ROOM_ONLY: 'ROOM_ONLY',
  BED_AND_BREAKFAST: 'BED_AND_BREAKFAST',
  HALF_BOARD: 'HALF_BOARD',
  FULL_BOARD: 'FULL_BOARD',
  ALL_INCLUSIVE: 'ALL_INCLUSIVE'
};

exports.bookings_room_category = exports.$Enums.bookings_room_category = {
  STANDARD: 'STANDARD',
  DELUXE: 'DELUXE',
  SUITE: 'SUITE',
  EXECUTIVE: 'EXECUTIVE',
  PRESIDENTIAL: 'PRESIDENTIAL'
};

exports.bookings_status = exports.$Enums.bookings_status = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED',
  DELETED: 'DELETED'
};

exports.shared_status = exports.$Enums.shared_status = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  DELETED: 'DELETED'
};

exports.invoices_status = exports.$Enums.invoices_status = {
  UNPAID: 'UNPAID',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED',
  DELETED: 'DELETED'
};

exports.notifications_type = exports.$Enums.notifications_type = {
  PAYMENT_REMINDER: 'PAYMENT_REMINDER',
  BOOKING_CONFIRMATION: 'BOOKING_CONFIRMATION',
  INVOICE_GENERATED: 'INVOICE_GENERATED',
  CANCELLATION: 'CANCELLATION',
  SYSTEM_ALERT: 'SYSTEM_ALERT'
};

exports.payments_payment_method = exports.$Enums.payments_payment_method = {
  CASH: 'CASH',
  CREDIT_CARD: 'CREDIT_CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  MOBILE_MONEY: 'MOBILE_MONEY',
  CHEQUE: 'CHEQUE'
};

exports.users_role = exports.$Enums.users_role = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  AGENT: 'AGENT',
  ACCOUNTANT: 'ACCOUNTANT'
};

exports.quotes_status = exports.$Enums.quotes_status = {
  ACTIVE: 'ACTIVE',
  CONVERTED: 'CONVERTED',
  EXPIRED: 'EXPIRED',
  DELETED: 'DELETED'
};

exports.rack_rates_travel_period = exports.$Enums.rack_rates_travel_period = {
  LOW_SEASON: 'LOW_SEASON',
  SHOULDER_SEASON: 'SHOULDER_SEASON',
  HIGH_SEASON: 'HIGH_SEASON',
  PEAK_SEASON: 'PEAK_SEASON'
};

exports.rack_rates_meal_plan = exports.$Enums.rack_rates_meal_plan = {
  ROOM_ONLY: 'ROOM_ONLY',
  BED_AND_BREAKFAST: 'BED_AND_BREAKFAST',
  HALF_BOARD: 'HALF_BOARD',
  FULL_BOARD: 'FULL_BOARD',
  ALL_INCLUSIVE: 'ALL_INCLUSIVE'
};

exports.rack_rates_room_category = exports.$Enums.rack_rates_room_category = {
  STANDARD: 'STANDARD',
  DELUXE: 'DELUXE',
  SUITE: 'SUITE',
  EXECUTIVE: 'EXECUTIVE',
  PRESIDENTIAL: 'PRESIDENTIAL'
};

exports.rate_cards_travel_period = exports.$Enums.rate_cards_travel_period = {
  LOW_SEASON: 'LOW_SEASON',
  SHOULDER_SEASON: 'SHOULDER_SEASON',
  HIGH_SEASON: 'HIGH_SEASON',
  PEAK_SEASON: 'PEAK_SEASON'
};

exports.rate_cards_meal_plan = exports.$Enums.rate_cards_meal_plan = {
  ROOM_ONLY: 'ROOM_ONLY',
  BED_AND_BREAKFAST: 'BED_AND_BREAKFAST',
  HALF_BOARD: 'HALF_BOARD',
  FULL_BOARD: 'FULL_BOARD',
  ALL_INCLUSIVE: 'ALL_INCLUSIVE'
};

exports.rate_cards_room_category = exports.$Enums.rate_cards_room_category = {
  STANDARD: 'STANDARD',
  DELUXE: 'DELUXE',
  SUITE: 'SUITE',
  EXECUTIVE: 'EXECUTIVE',
  PRESIDENTIAL: 'PRESIDENTIAL'
};

exports.seasons_period_type = exports.$Enums.seasons_period_type = {
  LOW_SEASON: 'LOW_SEASON',
  SHOULDER_SEASON: 'SHOULDER_SEASON',
  HIGH_SEASON: 'HIGH_SEASON',
  PEAK_SEASON: 'PEAK_SEASON'
};

exports.transportation_type = exports.$Enums.transportation_type = {
  AIR: 'AIR',
  SGR: 'SGR',
  SGR_TRANSFER: 'SGR_TRANSFER',
  ROAD: 'ROAD',
  OTHER: 'OTHER'
};

exports.transportation_status = exports.$Enums.transportation_status = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED',
  DELETED: 'DELETED'
};

exports.users_status = exports.$Enums.users_status = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED',
  SUSPENDED: 'SUSPENDED',
  DELETED: 'DELETED'
};

exports.Prisma.ModelName = {
  accounts: 'accounts',
  bookings: 'bookings',
  cancellations: 'cancellations',
  clients: 'clients',
  hotel_policies: 'hotel_policies',
  hotels: 'hotels',
  invoices: 'invoices',
  notifications: 'notifications',
  payments: 'payments',
  permissions: 'permissions',
  quotes: 'quotes',
  rack_rates: 'rack_rates',
  rate_cards: 'rate_cards',
  reminders: 'reminders',
  seasons: 'seasons',
  sessions: 'sessions',
  transportation: 'transportation',
  users: 'users',
  branches: 'branches',
  users_branches: 'users_branches',
  events_log: 'events_log'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
